@page "/childrenlist"

@using AutoMapper
@using Models
@using Services
@using Contexts
@using DiagnosticsSummary.Common.Models

<PageTitle>Список детей</PageTitle>

<h1>Список детей</h1>

@if(infoLabel is not null)
{
    <div class="row">
        <label>@infoLabel</label>
    </div>
}

@if (children is not null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Номер</th>
                <th>@HtmlChildService.LabelDictionary[HtmlChildService.LabelList.FIO]</th>
                <th>@HtmlChildService.LabelDictionary[HtmlChildService.LabelList.Gender]</th>
                <th>@HtmlChildService.LabelDictionary[HtmlChildService.LabelList.Age]</th>
                <th>@HtmlChildService.LabelDictionary[HtmlChildService.LabelList.AgeGroup]</th>
                <th>@HtmlChildService.LabelDictionary[HtmlChildService.LabelList.Group]</th>
                <th>@HtmlChildService.LabelDictionary[HtmlChildService.LabelList.Diagnosis]</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var child in children)
            {
                <tr class=@RowBackground(child)
                    @onclick=@(()=>{selectedChild = child;})>
                        <td>@(children.FindIndex((c) => c == child) + 1)</td>
                        <td>@child.FIO</td>
                        <td>@child.Gender</td>
                        <td>@child.Age</td>
                        <td>@child.AgeGroup</td>
                        <td>@child.Group</td>
                        <td>@child.Diagnosis</td>
                </tr>
            }
        </tbody>
    </table>
}

<button @onclick="OnFindClick">Найти</button>
<button @onclick="OnAddClick">Добавить</button>
@if (selectedChild is not null)
{
    <button @onclick="OnUpdateClick">Изменить</button>
    <button @onclick="OnDeleteClick">Удалить</button>
    <button @onclick=@(() => {selectedChild = null;})>Сбросить выделение</button>
}

@code {
    string? infoLabel { get; set; } = null;
    List<ChildView>? children { get; set; } = null;
    static ActionType? actionRequired { get; set; } = null;
    static ChildView? selectedChild { get; set; } = null;

    [Inject]
    IMapper mapper { get; set; }
    [Inject]
    NavigationManager navigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CheckRequiredAction();
    }

    private void CheckRequiredAction()
    {
        if (actionRequired is not null)
        {
            //TODO: send request to backend
            //var childData = mapper.Map<ChildFilter>(DataInputContext.Fields);            
            //actionRequired = null;
            //selectedChild = null;
        }
    }

    private string RowBackground(ChildView child)
    {
        return (selectedChild is null || selectedChild != child) ? "row-notselected" : "row-selected";
    }

    public void OnFindClick()
    {
        actionRequired = ActionType.Read;
        DataInputContext.FillContext("/childrenlist", "/childrenlist", true, HtmlChildService.ChildInfoInitialize());
        navigationManager.NavigateTo("/datainput");
    }

    public void OnAddClick()
    {
        actionRequired = ActionType.Create;
        DataInputContext.FillContext("/childrenlist", "/childrenlist", false, HtmlChildService.ChildInfoInitialize());
        navigationManager.NavigateTo("/datainput");
    }

    public void OnDeleteClick()
    {
        actionRequired = ActionType.Delete;
        CheckRequiredAction();
    }

    public void OnUpdateClick()
    {
        actionRequired = ActionType.Update;
        DataInputContext.FillContext("/childrenlist", "/childrenlist", true, HtmlChildService.ChildInfoInitialize(selectedChild));
        navigationManager.NavigateTo("/datainput");
    }
}
